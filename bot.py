import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
import os

# –ò–º–ø–æ—Ä—Ç GigaChat (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à –º–æ–¥—É–ª—å)
from model import query_gigachat

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
USER_DATA = {}

# FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
class ReminderStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_time = State()


# ==========================
# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
# ==========================
@dp.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    await state.clear()
    user_id = message.from_user.id

    # –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    if user_id in USER_DATA:
        name = USER_DATA[user_id]["name"]
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}! –í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –Ω–∞–∑—ã–≤–∞—Ç—å –≤–∞—Å?")
    await state.set_state(ReminderStates.waiting_for_name)


@dp.message(ReminderStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """
    –ó–∞–ø–∏—Å—å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.
    """
    user_id = message.from_user.id
    user_name = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USER_DATA[user_id] = {
        "name": user_name,
        "statistics": {"–ø–ª–∞—Å—Ç–∏–∫": 0, "—Å—Ç–µ–∫–ª–æ": 0, "–º–µ—Ç–∞–ª–ª": 0},
        "reminder_time": "09:00",
    }

    await message.answer(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é:",
        reply_markup=get_main_menu(),
    )
    await state.clear()


# ==========================
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# ==========================
@dp.message(Command("menu"))
async def show_menu(message: Message):
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await message.answer("–í–æ—Ç –≤–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())


@dp.message(ReminderStates.waiting_for_time)
async def process_reminder_time(message: Message, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    """
    user_id = message.from_user.id
    reminder_time = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    if not validate_time_format(reminder_time):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30.")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    USER_DATA[user_id]["reminder_time"] = reminder_time
    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {reminder_time}.", reply_markup=get_main_menu())
    await state.clear()


# ==========================
# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
# ==========================
@dp.message()
async def handle_messages(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ä–∞–±–æ—Ç–∞ —Å GigaChat).
    """
    user_id = message.from_user.id
    text = message.text.lower().strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in USER_DATA:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if text == "üìä –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        stats = USER_DATA[user_id]["statistics"]
        stats_message = "\n".join(f"‚úÖ {key}: {value}" for key, value in stats.items())
        await message.answer(f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n{stats_message}")
        return

    elif text == "‚è∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30.")
        await state.set_state(ReminderStates.waiting_for_time)
        return

    elif text == "üöÆ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏":
        photo_1 = FSInputFile('images/first_type.jpg')
        photo_2 = FSInputFile('images/2nd_type.jpg')

        # MD
        text_1 = """
        –í –†–æ—Å—Å–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ —Ä–∞–∑–¥–µ–ª—å–Ω–æ–º—É —Å–±–æ—Ä—É –º—É—Å–æ—Ä–∞.
        **–ü—Ä–æ–µ–∫—Ç 1:**
        –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 2 –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≤—Ç–æ—Ä—Å—ã—Ä—å—è –∏ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤ —Å–∏–Ω–µ–≥–æ –∏ —Å–µ—Ä–æ–≥–æ —Ü–≤–µ—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
        –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å —Å–∏–Ω–µ–π –Ω–∞–∫–ª–µ–π–∫–æ–π –∏ –Ω–∞–¥–ø–∏—Å—å—é ¬´–í—Ç–æ—Ä—Å—ã—Ä—å–µ¬ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –æ—Ç—Ö–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ª–µ–∂–∞—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ. –ë—É–º–∞–≥—É, –ø–ª–∞—Å—Ç–∏–∫, —Å—Ç–µ–∫–ª–æ –∏ –º–µ—Ç–∞–ª–ª —Å–ª–µ–¥—É–µ—Ç –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏–º–µ–Ω–Ω–æ –≤ –Ω–∏—Ö. –í –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å —Å–µ—Ä–æ–π –Ω–∞–∫–ª–µ–π–∫–æ–π –∏ –Ω–∞–¥–ø–∏—Å—å—é ¬´–°–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã¬ª –º–æ–∂–Ω–æ –±—Ä–æ—Å–∞—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ: –ø–∏—â–µ–≤—ã–µ –æ—Ç—Ö–æ–¥—ã, —Å—Ä–µ–¥—Å—Ç–≤–∞ –ª–∏—á–Ω–æ–π –≥–∏–≥–∏–µ–Ω—ã, –Ω–µ–ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –µ–º–∫–æ—Å—Ç–∏ –∏–∑-–ø–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è –∏ –¥—Ä—É–≥–æ–µ.
         """

        text_2 = """
        **–ü—Ä–æ–µ–∫—Ç 2:** 
        –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 4 —Ü–≤–µ—Ç–∞.
        –ñ–µ–ª—Ç—ã–µ - –¥–ª—è –ø–ª–∞—Å—Ç–∏–∫–∞;
        –°–∏–Ω–∏–µ - –¥–ª—è —Å—Ç–µ–∫–ª–∞;
        –ó–µ–ª–µ–Ω—ã–µ - –¥–ª—è –±—É–º–∞–≥–∏;
        –ö—Ä–∞—Å–Ω—ã–π - –¥–ª—è –Ω–µ—Å–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤.
        
        –ö—É–¥–∞ –≤—ã–∫–∏–Ω—É—Ç—å –±–∞—Ç–∞—Ä–µ–π–∫–∏, –ª–∞–º–ø–æ—á–∫–∏, —Ç–µ—Ä–º–æ–º–µ—Ç—Ä—ã?

        –≠—Ç–æ –æ–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã, –∏—Ö –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –≤ –æ–±—ã—á–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã. –õ—é–º–∏–Ω–µ—Å—Ü–µ–Ω—Ç–Ω—ã–µ –ª–∞–º–ø—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ä—Ç—É—Ç—å, –º–æ–∂–Ω–æ —Å–¥–∞—Ç—å –≤ –ø–æ–º–µ—â–µ–Ω–∏—è—Ö –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–∏—Ö —Å–ª—É–∂–± ([–û–î–°](https://data.mos.ru/opendata/2459)). –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä–∞—Ñ–∏–∫–µ —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–≤–µ—Ä—è—Ö –û–î–°, –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç–µ–Ω–¥–∞—Ö –∏ –≤ –ø–æ–¥—ä–µ–∑–¥–∞—Ö –¥–æ–º–æ–≤. –í —Å—Ç–æ–ª–∏—Ü–µ –±–æ–ª–µ–µ 900 —Ç–∞–∫–∏—Ö —Ç–æ—á–µ–∫ –ø—Ä–∏–µ–º–∞.
        
        –†—Ç—É—Ç–Ω—ã–µ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç –ø–æ –∞–¥—Ä–µ—Å—É: –í–∞—Ä—à–∞–≤—Å–∫–æ–µ —à–æ—Å—Å–µ, –¥–æ–º 93.

        –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±–∞—Ç–∞—Ä–µ–π–∫–∏ –º–æ–∂–Ω–æ —Å–¥–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö, –æ—Ñ–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–∞—Ö, –æ—Å—Ç–∞–≤–∏—Ç—å –≤ —É–ª–∏—á–Ω—ã—Ö –±–æ–∫—Å–∞—Ö. –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –ø—Ä–∏–µ–º–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω [–Ω–∞ —Å–∞–π—Ç–µ](https://eco2eco.ru/map/). 
        """

        await bot.send_photo(message.chat.id, photo=photo_1, caption=text_1, parse_mode="Markdown")
        await bot.send_photo(message.chat.id, photo=photo_2, caption=text_2, parse_mode="Markdown")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–æ–π
    updated = update_statistics(user_id, text)
    if updated:
        stats = USER_DATA[user_id]["statistics"]
        stats_message = "\n".join(f"‚úÖ {key}: {value}" for key, value in stats.items())
        await message.answer(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n{stats_message}")
        return

    # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GigaChat
    try:
        response = query_gigachat(text)
        await message.answer(response)
    except Exception as error:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat: {error}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å GigaChat. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ==========================
# –£—Ç–∏–ª–∏—Ç—ã
# ==========================
def get_main_menu():
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")],
            [KeyboardButton(text="‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
            [KeyboardButton(text="üöÆ –ü—Ä–∞–≤–∏–ª–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )


def validate_time_format(time_str):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –ß–ß:–ú–ú.
    """
    try:
        hours, minutes = map(int, time_str.split(":"))
        return 0 <= hours < 24 and 0 <= minutes < 60
    except ValueError:
        return False


def update_statistics(user_id: int, text: str) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
    """
    if "–ø–ª–∞—Å—Ç–∏–∫" in text:
        USER_DATA[user_id]["statistics"]["–ø–ª–∞—Å—Ç–∏–∫"] += 1
        return True
    elif "—Å—Ç–µ–∫–ª–æ" in text:
        USER_DATA[user_id]["statistics"]["—Å—Ç–µ–∫–ª–æ"] += 1
        return True
    elif "–º–µ—Ç–∞–ª–ª" in text:
        USER_DATA[user_id]["statistics"]["–º–µ—Ç–∞–ª–ª"] += 1
        return True
    return False


# ==========================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ==========================
async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞.
    """
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
