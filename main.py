import os
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters.command import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
import requests
import logging
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –∏–∑ .env
load_dotenv()
TELEGRAM_BOT_API_KEY = os.getenv("TELEGRAM_BOT_API_KEY")
LLAMA_API_URL = os.getenv("LLAMA_API_URL")  # URL —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TELEGRAM_BOT_API_KEY)
dp = Dispatcher(storage=MemoryStorage())
router = Router()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Router –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–º–∏—Ç–∞—Ü–∏—è –ë–î)
user_stats = {}

# FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class Registration(StatesGroup):
    name = State()
    schedule = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏
async def query_llama(prompt):
    try:
        response = requests.post(LLAMA_API_URL, json={"prompt": prompt})
        if response.status_code == 200:
            return response.json().get("response", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        return "–û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –º–æ–¥–µ–ª—è–º–∏."
    except Exception as ex:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏: {ex}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏."

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in user_stats:
        user_stats[user_id] = {"queries": 0}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(Registration.name)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º —Å–±–æ—Ä–æ–º –æ—Ç—Ö–æ–¥–æ–≤. –ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(Registration.name)
async def set_user_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Registration.schedule)
    await message.answer("–ö–æ–≥–¥–∞ –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Ä–∞–∑–¥–µ–ª—å–Ω–æ–º —Å–±–æ—Ä–µ? –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30).")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@router.message(Registration.schedule)
async def set_user_schedule(message: types.Message, state: FSMContext):
    schedule = message.text
    try:
        hour, minute = map(int, schedule.split(":"))
        if 0 <= hour < 24 and 0 <= minute < 60:
            await state.update_data(schedule=schedule)
            user_data = await state.get_data()
            user_stats[message.from_user.id].update(user_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ "–ë–î"
            await state.clear()
            await message.answer(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò–º—è: {user_data['name']}, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {schedule}.")
        else:
            raise ValueError
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–º–æ—â–∏
@router.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –æ—Ç—Ö–æ–¥–æ–≤!\n"
        "- –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö—É–¥–∞ –≤—ã–±—Ä–æ—Å–∏—Ç—å –ø–ª–∞—Å—Ç–∏–∫?'\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
    )

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
@router.message()
async def handle_query(message: types.Message):
    user_id = message.from_user.id
    user_stats[user_id]["queries"] = user_stats[user_id].get("queries", 0) + 1  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    answer = await query_llama(message.text)
    await message.answer(answer)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@router.message(Command("stats"))
async def cmd_stats(message: types.Message):
    user_id = message.from_user.id
    user_data = user_stats.get(user_id, {})
    queries = user_data.get("queries", 0)
    schedule = user_data.get("schedule", "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    await message.answer(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"- –ó–∞–ø—Ä–æ—Å–æ–≤: {queries}\n"
        f"- –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {schedule}"
    )

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ Apscheduler
async def send_reminder():
    for user_id, data in user_stats.items():
        schedule = data.get("schedule")
        if schedule:
            await bot.send_message(user_id, "üîî –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∫–∞–∫ —É –≤–∞—Å –∏–¥—ë—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç—Ö–æ–¥–æ–≤.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()
scheduler.add_job(send_reminder, "interval", hours=24)
scheduler.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
